#include "day08.h"

Day08::Day08()
{
    dayNumber = 8;
}

void Day08::load(File file)
{
    String line;
    int r = 0;

    while(file.available())
    {
        line = file.readStringUntil('\n');
        numCols = line.length() - 1; //-1 to ignore the CR at the end
        for(int c = 0; c < numCols; c++)
        {
            if(line[c] != '.')
            {
                antennas[line[c]].push_back(makeCoord(r, c));
            }
        }
        r++;
    }

    numRows = r;
    
    file.close();
}

uint64_t Day08::solve1()
{
    for(auto a : antennas)
    {
        for(int i = 0; i < a.second.size(); i++)
        {
            for(int j = i + 1; j < a.second.size(); j++)
            {
                findAntinodes(a.second[i], a.second[j], 1);
            }
        }
    }
    return antinodes.size();
}

uint64_t Day08::solve2()
{
    antinodes.clear();

    for(auto a : antennas)
    {
        for(int i = 0; i < a.second.size(); i++)
        {
            for(int j = i + 1; j < a.second.size(); j++)
            {
                findAntinodes2(a.second[i], a.second[j]);
            }
        }
    }

    return antinodes.size();
}

//Finds the two antinodes generated by the given pair of antennas
//If they are within bounds, inserts them into the antinodes set
uint8_t Day08::findAntinodes(uint16_t a1, uint16_t a2, uint8_t multiplier)
{
    int dRow = multiplier * (row(a2) - row(a1));
    int dCol = multiplier * (col(a2) - col(a1));
    uint8_t inserted = 0;

    uint16_t antinode = makeCoord(row(a1) - dRow, col(a1) - dCol);
    if(row(antinode) < numRows && col(antinode) < numCols)
    {
        inserted++;
        antinodes.insert(antinode);
    }
    
    antinode = makeCoord(row(a2) + dRow, col(a2) + dCol);
    if(row(antinode) < numRows && col(antinode) < numCols)
    {
        inserted++;
        antinodes.insert(antinode);
    }

    return inserted;
}

void Day08::findAntinodes2(uint16_t a1, uint16_t a2)
{
    uint8_t inserted = 1;
    for(uint8_t i = 0; inserted; i++)
        inserted = findAntinodes(a1, a2, i);
}
